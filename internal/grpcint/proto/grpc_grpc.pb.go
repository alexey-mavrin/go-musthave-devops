// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/grpc.proto

package grpcint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricesClient is the client API for Metrices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricesClient interface {
	UpdateMetrices(ctx context.Context, in *UpdateMetricesRequest, opts ...grpc.CallOption) (*UpdateMetricesResponse, error)
}

type metricesClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricesClient(cc grpc.ClientConnInterface) MetricesClient {
	return &metricesClient{cc}
}

func (c *metricesClient) UpdateMetrices(ctx context.Context, in *UpdateMetricesRequest, opts ...grpc.CallOption) (*UpdateMetricesResponse, error) {
	out := new(UpdateMetricesResponse)
	err := c.cc.Invoke(ctx, "/grpcint.Metrices/UpdateMetrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricesServer is the server API for Metrices service.
// All implementations must embed UnimplementedMetricesServer
// for forward compatibility
type MetricesServer interface {
	UpdateMetrices(context.Context, *UpdateMetricesRequest) (*UpdateMetricesResponse, error)
	mustEmbedUnimplementedMetricesServer()
}

// UnimplementedMetricesServer must be embedded to have forward compatible implementations.
type UnimplementedMetricesServer struct {
}

func (UnimplementedMetricesServer) UpdateMetrices(context.Context, *UpdateMetricesRequest) (*UpdateMetricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetrices not implemented")
}
func (UnimplementedMetricesServer) mustEmbedUnimplementedMetricesServer() {}

// UnsafeMetricesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricesServer will
// result in compilation errors.
type UnsafeMetricesServer interface {
	mustEmbedUnimplementedMetricesServer()
}

func RegisterMetricesServer(s grpc.ServiceRegistrar, srv MetricesServer) {
	s.RegisterService(&Metrices_ServiceDesc, srv)
}

func _Metrices_UpdateMetrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricesServer).UpdateMetrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcint.Metrices/UpdateMetrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricesServer).UpdateMetrices(ctx, req.(*UpdateMetricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metrices_ServiceDesc is the grpc.ServiceDesc for Metrices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metrices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcint.Metrices",
	HandlerType: (*MetricesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMetrices",
			Handler:    _Metrices_UpdateMetrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc.proto",
}
